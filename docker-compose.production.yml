# Cognivern Production Architecture
# Scalable, efficient, and maintainable deployment
version: "3.8"

services:
  # Core API Service
  cognivern-api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: cognivern-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/cognivern
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs/api:/app/logs
      - ./data/api:/app/data
    networks:
      - cognivern-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Trading Agent Service
  cognivern-agents:
    build:
      context: .
      dockerfile: Dockerfile.agents
      target: production
    container_name: cognivern-agents
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=http://cognivern-api:3000
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env.production
    depends_on:
      cognivern-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs/agents:/app/logs
      - ./data/agents:/app/data
    networks:
      - cognivern-internal
    healthcheck:
      test: ["CMD", "pgrep", "-f", "agents"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: cognivern-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cognivern
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - cognivern-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: cognivern-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - cognivern-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: cognivern-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/production.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - cognivern-api
    networks:
      - cognivern-internal
      - cognivern-external

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: cognivern-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - cognivern-internal

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: cognivern-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - cognivern-internal

  # Metrics Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cognivern-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - cognivern-internal

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  loki_data:
  grafana_data:

networks:
  cognivern-internal:
    driver: bridge
    internal: true
  cognivern-external:
    driver: bridge
